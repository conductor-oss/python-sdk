import pprint
import re  # noqa: F401

import six

class TaskRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_type': 'str',
        'task_id': 'str',
        'reference_task_name': 'str',
        'retry_count': 'int',
        'task_def_name': 'str',
        'retried_task_id': 'str',
        'workflow_type': 'str',
        'reason_for_incompletion': 'str',
        'priority': 'int',
        'variables': 'dict(str, object)',
        'tasks': 'list[Task]',
        'created_by': 'str',
        'create_time': 'int',
        'update_time': 'int',
        'status': 'str'
    }

    attribute_map = {
        'task_type': 'taskType',
        'task_id': 'taskId',
        'reference_task_name': 'referenceTaskName',
        'retry_count': 'retryCount',
        'task_def_name': 'taskDefName',
        'retried_task_id': 'retriedTaskId',
        'workflow_type': 'workflowType',
        'reason_for_incompletion': 'reasonForIncompletion',
        'priority': 'priority',
        'variables': 'variables',
        'tasks': 'tasks',
        'created_by': 'createdBy',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'status': 'status'
    }

    def __init__(self, task_type=None, task_id=None, reference_task_name=None, retry_count=None,
                 task_def_name=None, retried_task_id=None, workflow_type=None,
                 reason_for_incompletion=None, priority=None, variables=None, tasks=None,
                 created_by=None, create_time=None, update_time=None, status=None,response_type=None):  # noqa: E501
        """TaskRun - a model defined in Swagger"""  # noqa: E501
        self._task_type = None
        self._task_id = None
        self._reference_task_name = None
        self._retry_count = None
        self._task_def_name = None
        self._retried_task_id = None
        self._workflow_type = None
        self._reason_for_incompletion = None
        self._priority = None
        self._variables = None
        self._tasks = None
        self._created_by = None
        self._create_time = None
        self._update_time = None
        self._status = None
        self.discriminator = None
        if task_type is not None:
            self.task_type = task_type
        if task_id is not None:
            self.task_id = task_id
        if reference_task_name is not None:
            self.reference_task_name = reference_task_name
        if retry_count is not None:
            self.retry_count = retry_count
        if task_def_name is not None:
            self.task_def_name = task_def_name
        if retried_task_id is not None:
            self.retried_task_id = retried_task_id
        if workflow_type is not None:
            self.workflow_type = workflow_type
        if reason_for_incompletion is not None:
            self.reason_for_incompletion = reason_for_incompletion
        if priority is not None:
            self.priority = priority
        if variables is not None:
            self.variables = variables
        if response_type is not None:
            self.response_type = response_type
        if tasks is not None:
            self.tasks = tasks
        if created_by is not None:
            self.created_by = created_by
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if status is not None:
            self.status = status

    @property
    def task_type(self):
        """Gets the task_type of this TaskRun.  # noqa: E501


        :return: The task_type of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskRun.


        :param task_type: The task_type of this TaskRun.  # noqa: E501
        :type: str
        """

        self._task_type = task_type

    @property
    def task_id(self):
        """Gets the task_id of this TaskRun.  # noqa: E501


        :return: The task_id of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskRun.


        :param task_id: The task_id of this TaskRun.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def reference_task_name(self):
        """Gets the reference_task_name of this TaskRun.  # noqa: E501


        :return: The reference_task_name of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._reference_task_name

    @reference_task_name.setter
    def reference_task_name(self, reference_task_name):
        """Sets the reference_task_name of this TaskRun.


        :param reference_task_name: The reference_task_name of this TaskRun.  # noqa: E501
        :type: str
        """

        self._reference_task_name = reference_task_name

    @property
    def retry_count(self):
        """Gets the retry_count of this TaskRun.  # noqa: E501


        :return: The retry_count of this TaskRun.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this TaskRun.


        :param retry_count: The retry_count of this TaskRun.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def task_def_name(self):
        """Gets the task_def_name of this TaskRun.  # noqa: E501


        :return: The task_def_name of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._task_def_name

    @task_def_name.setter
    def task_def_name(self, task_def_name):
        """Sets the task_def_name of this TaskRun.


        :param task_def_name: The task_def_name of this TaskRun.  # noqa: E501
        :type: str
        """

        self._task_def_name = task_def_name

    @property
    def retried_task_id(self):
        """Gets the retried_task_id of this TaskRun.  # noqa: E501


        :return: The retried_task_id of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._retried_task_id

    @retried_task_id.setter
    def retried_task_id(self, retried_task_id):
        """Sets the retried_task_id of this TaskRun.


        :param retried_task_id: The retried_task_id of this TaskRun.  # noqa: E501
        :type: str
        """

        self._retried_task_id = retried_task_id

    @property
    def workflow_type(self):
        """Gets the workflow_type of this TaskRun.  # noqa: E501


        :return: The workflow_type of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this TaskRun.


        :param workflow_type: The workflow_type of this TaskRun.  # noqa: E501
        :type: str
        """

        self._workflow_type = workflow_type

    @property
    def reason_for_incompletion(self):
        """Gets the reason_for_incompletion of this TaskRun.  # noqa: E501


        :return: The reason_for_incompletion of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_incompletion

    @reason_for_incompletion.setter
    def reason_for_incompletion(self, reason_for_incompletion):
        """Sets the reason_for_incompletion of this TaskRun.


        :param reason_for_incompletion: The reason_for_incompletion of this TaskRun.  # noqa: E501
        :type: str
        """

        self._reason_for_incompletion = reason_for_incompletion

    @property
    def priority(self):
        """Gets the priority of this TaskRun.  # noqa: E501


        :return: The priority of this TaskRun.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskRun.


        :param priority: The priority of this TaskRun.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def variables(self):
        """Gets the variables of this TaskRun.  # noqa: E501


        :return: The variables of this TaskRun.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this TaskRun.


        :param variables: The variables of this TaskRun.  # noqa: E501
        :type: dict(str, object)
        """

        self._variables = variables

    @property
    def tasks(self):
        """Gets the tasks of this TaskRun.  # noqa: E501


        :return: The tasks of this TaskRun.  # noqa: E501
        :rtype: list[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this TaskRun.


        :param tasks: The tasks of this TaskRun.  # noqa: E501
        :type: list[Task]
        """

        self._tasks = tasks

    @property
    def created_by(self):
        """Gets the created_by of this TaskRun.  # noqa: E501


        :return: The created_by of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TaskRun.


        :param created_by: The created_by of this TaskRun.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def create_time(self):
        """Gets the create_time of this TaskRun.  # noqa: E501


        :return: The create_time of this TaskRun.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TaskRun.


        :param create_time: The create_time of this TaskRun.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this TaskRun.  # noqa: E501


        :return: The update_time of this TaskRun.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TaskRun.


        :param update_time: The update_time of this TaskRun.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def status(self):
        """Gets the status of this TaskRun.  # noqa: E501


        :return: The status of this TaskRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskRun.


        :param status: The status of this TaskRun.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "SCHEDULED", "COMPLETED",
                          "FAILED", "CANCELED", "TIMEOUT", "SKIPPED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other