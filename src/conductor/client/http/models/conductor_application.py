import pprint
import re  # noqa: F401
from dataclasses import dataclass, field, asdict
from typing import Optional, Dict, List, Any

import six
from deprecated import deprecated


@dataclass
class ConductorApplication:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    _id: Optional[str] = field(default=None, init=False)
    _name: Optional[str] = field(default=None, init=False)
    _created_by: Optional[str] = field(default=None, init=False)
    _create_time: Optional[int] = field(default=None, init=False)
    _update_time: Optional[int] = field(default=None, init=False)
    _updated_by: Optional[str] = field(default=None, init=False)

    swagger_types: Dict[str, str] = field(default_factory=lambda: {
        'id': 'str',
        'name': 'str',
        'created_by': 'str',
        'create_time': 'int',
        'update_time': 'int',
        'updated_by': 'str'
    }, init=False)

    attribute_map: Dict[str, str] = field(default_factory=lambda: {
        'id': 'id',
        'name': 'name',
        'created_by': 'createdBy',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'updated_by': 'updatedBy'
    }, init=False)

    discriminator: Optional[str] = field(default=None, init=False)

    def __init__(self, id=None, name=None, created_by=None, create_time=None, update_time=None, updated_by=None):  # noqa: E501
        """ConductorApplication - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._created_by = None
        self._create_time = None
        self._update_time = None
        self._updated_by = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if created_by is not None:
            self.created_by = created_by
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if updated_by is not None:
            self.updated_by = updated_by

    def __post_init__(self):
        """Post initialization for dataclass attributes"""
        self._id = None
        self._name = None
        self._created_by = None
        self._create_time = None
        self._update_time = None
        self._updated_by = None
        self.discriminator = None

    @property
    def id(self) -> Optional[str]:
        """Gets the id of this ConductorApplication.  # noqa: E501


        :return: The id of this ConductorApplication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: Optional[str]):
        """Sets the id of this ConductorApplication.


        :param id: The id of this ConductorApplication.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> Optional[str]:
        """Gets the name of this ConductorApplication.  # noqa: E501


        :return: The name of this ConductorApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: Optional[str]):
        """Sets the name of this ConductorApplication.


        :param name: The name of this ConductorApplication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_by(self) -> Optional[str]:
        """Gets the created_by of this ConductorApplication.  # noqa: E501


        :return: The created_by of this ConductorApplication.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: Optional[str]):
        """Sets the created_by of this ConductorApplication.


        :param created_by: The created_by of this ConductorApplication.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def create_time(self) -> Optional[int]:
        """Gets the create_time of this ConductorApplication.  # noqa: E501


        :return: The create_time of this ConductorApplication.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time: Optional[int]):
        """Sets the create_time of this ConductorApplication.


        :param create_time: The create_time of this ConductorApplication.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def update_time(self) -> Optional[int]:
        """Gets the update_time of this ConductorApplication.  # noqa: E501


        :return: The update_time of this ConductorApplication.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time: Optional[int]):
        """Sets the update_time of this ConductorApplication.


        :param update_time: The update_time of this ConductorApplication.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def updated_by(self) -> Optional[str]:
        """Gets the updated_by of this ConductorApplication.  # noqa: E501


        :return: The updated_by of this ConductorApplication.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by: Optional[str]):
        """Sets the updated_by of this ConductorApplication.


        :param updated_by: The updated_by of this ConductorApplication.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self) -> Dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConductorApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ConductorApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other