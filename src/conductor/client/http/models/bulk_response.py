import pprint
import re  # noqa: F401
import six
from dataclasses import dataclass, field, InitVar
from typing import Dict, List, Generic, TypeVar, Optional, Any
from dataclasses import asdict

T = TypeVar('T')

@dataclass
class BulkResponse(Generic[T]):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulk_error_results': 'dict(str, str)',
        'bulk_successful_results': 'list[str]',
        'message': 'str'
    }

    attribute_map = {
        'bulk_error_results': 'bulkErrorResults',
        'bulk_successful_results': 'bulkSuccessfulResults',
        'message': 'message'
    }

    _bulk_error_results: Dict[str, str] = field(default_factory=dict)
    _bulk_successful_results: List[T] = field(default_factory=list)
    _message: str = field(default="Bulk Request has been processed.")

    bulk_error_results: InitVar[Optional[Dict[str, str]]] = None
    bulk_successful_results: InitVar[Optional[List[T]]] = None
    message: InitVar[Optional[str]] = None

    def __init__(self, bulk_error_results=None, bulk_successful_results=None, message=None):  # noqa: E501
        """BulkResponse - a model defined in Swagger"""  # noqa: E501
        self._bulk_error_results = {}
        self._bulk_successful_results = []
        self._message = "Bulk Request has been processed."
        self.discriminator = None
        if bulk_error_results is not None:
            self.bulk_error_results = bulk_error_results
        if bulk_successful_results is not None:
            self.bulk_successful_results = bulk_successful_results
        if message is not None:
            self.message = message

    def __post_init__(self, bulk_error_results, bulk_successful_results, message):
        if bulk_error_results is not None:
            self.bulk_error_results = bulk_error_results
        if bulk_successful_results is not None:
            self.bulk_successful_results = bulk_successful_results
        if message is not None:
            self.message = message

    @property
    def bulk_error_results(self):
        """Gets the bulk_error_results of this BulkResponse.  # noqa: E501

        Key - entityId Value - error message processing this entity

        :return: The bulk_error_results of this BulkResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._bulk_error_results

    @bulk_error_results.setter
    def bulk_error_results(self, bulk_error_results):
        """Sets the bulk_error_results of this BulkResponse.

        Key - entityId Value - error message processing this entity

        :param bulk_error_results: The bulk_error_results of this BulkResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._bulk_error_results = bulk_error_results

    @property
    def bulk_successful_results(self):
        """Gets the bulk_successful_results of this BulkResponse.  # noqa: E501


        :return: The bulk_successful_results of this BulkResponse.  # noqa: E501
        :rtype: list[T]
        """
        return self._bulk_successful_results

    @bulk_successful_results.setter
    def bulk_successful_results(self, bulk_successful_results):
        """Sets the bulk_successful_results of this BulkResponse.


        :param bulk_successful_results: The bulk_successful_results of this BulkResponse.  # noqa: E501
        :type: list[T]
        """

        self._bulk_successful_results = bulk_successful_results

    @property
    def message(self):
        """Gets the message of this BulkResponse.  # noqa: E501


        :return: The message of this BulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BulkResponse.


        :param message: The message of this BulkResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def append_successful_response(self, result: T) -> None:
        """Appends a successful result to the bulk_successful_results list.

        :param result: The successful result to append
        :type result: T
        """
        self._bulk_successful_results.append(result)

    def append_failed_response(self, id: str, error_message: str) -> None:
        """Appends a failed response to the bulk_error_results map.

        :param id: The entity ID
        :type id: str
        :param error_message: The error message
        :type error_message: str
        """
        self._bulk_error_results[id] = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other